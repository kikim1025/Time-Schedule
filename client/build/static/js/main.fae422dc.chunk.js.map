{"version":3,"sources":["constants/constants.js","redux/reducer.js","redux/store.js","components/Login.js","redux/actions.js","components/schedule-column/slot/Day.js","redux/selectors.js","components/schedule-column/slot/Hour.js","components/schedule-column/ScheduleColumn.js","components/Schedule.js","App.js","index.js"],"names":["ADD_NAME","GET_DATA","FAIL_DUP","FAIL","WEEK_DAYS","DAY_HOURS","initState","reducer","state","arguments","length","undefined","action","type","Object","assign","name","payload","appointments","note","store","createStore","applyMiddleware","thunk","ConnectLogin","getLoginInput","event","_this","setState","target","value","handleLogin","props","addName","react_default","a","createElement","id","onClick","this","maxLength","placeholder","onChange","React","Component","Login","connect","dispatch","Day","className","handleHoursHide","day","selectColor","ownProps","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","e","hour","err","return","ConnectHour","modal","toggleModal","sendAppointment","canSubmit","color","ModalBody","ModalFooter","Button","concat","Modal","isOpen","toggle","ModalHeader","Hour","$","post","then","res","data","status","ScheduleColumn","hours","_this2","schedule_column_slot_Day","d","key","i","map","h","slot_Hour","ConnectSchedule","componentDidMount","getData","components_schedule_column_ScheduleColumn","Schedule","get","ConnectApp","components_Schedule","components_Login","App","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fae422dc.chunk.js","sourcesContent":["// Redux action constants\r\nexport const ADD_NAME = 'ADD_NAME';\r\nexport const GET_DATA = 'GET_DATA';\r\nexport const FAIL_DUP = 'FAIL_DUP';\r\nexport const FAIL = 'FAIL';\r\n\r\n// Define weekdays to be shown on schedule, as well as hour heading\r\nexport const WEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\r\n\r\n// Define specific hours to be shown per day\r\nexport const DAY_HOURS = ['9am', '10am', '11am', '12pm', '1pm', '2pm', '3pm', '4pm', '5pm'];","import { ADD_NAME, GET_DATA, FAIL_DUP, FAIL } from '../constants/constants';\r\n\r\nconst initState = {};\r\n\r\nfunction reducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case ADD_NAME:\r\n            return Object.assign({}, state, {\r\n                name: action.payload\r\n            });\r\n        case GET_DATA:\r\n            return Object.assign({}, state, {\r\n                appointments: action.payload,\r\n                note: ''\r\n            });\r\n        case FAIL_DUP:\r\n            return Object.assign({}, state, { \r\n                appointments: action.payload,\r\n                note: 'Another client already signed up for the hour slot during your data retrieval and data submission. Appointment data refreshed, please pick other time slots.'\r\n            });\r\n        case FAIL:\r\n            return Object.assign({}, state, { \r\n                note: 'ERROR'\r\n            });\r\n        default: \r\n            return state;\r\n    };\r\n};\r\n\r\nexport default reducer;","import { createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\n// create redux store and apply middleware\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addName } from '../../src/redux/actions';\r\nimport './Login.css';\r\n\r\nclass ConnectLogin extends React.Component {\r\n\r\n    // local state to keep track of name until submission to redux store\r\n    state = {\r\n        name: ''\r\n    };\r\n\r\n    getLoginInput = (event) => {\r\n        this.setState({ name: event.target.value });\r\n    };\r\n\r\n    handleLogin = () => {\r\n        this.props.addName(this.state.name);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id='login-page'>\r\n                <div id='login-message'>Welcome to the Appointment Scheduler, Please Enter Your Name to Continue</div>\r\n                <button id='login-button' onClick={this.handleLogin}>Login</button>\r\n                <input id='login-input' type='text' maxLength='15' placeholder='Name' onChange={this.getLoginInput} ></input>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addName: name => dispatch(addName(name))\r\n    };\r\n};\r\n\r\nconst Login = connect(null, mapDispatchToProps) (ConnectLogin);\r\n\r\nexport default Login;","import $ from 'axios';\r\nimport {ADD_NAME, GET_DATA, FAIL_DUP, FAIL} from '../constants/constants';\r\n\r\n// login feature with a user's name to redux store\r\nexport function addName(payload) {\r\n    return {\r\n        type: ADD_NAME,\r\n        payload\r\n    };\r\n};\r\n\r\n// retrieve appointments data from server to redux store\r\nexport function getData() {\r\n    return function(dispatch) {\r\n        return (\r\n            $.get('/api/appointments')\r\n            .then((res) => {\r\n                dispatch({ type: GET_DATA, payload: res.data.data });\r\n            })\r\n        );    \r\n    };\r\n};\r\n\r\n// send appointments request to server, then relay success or duplicate fail response, with refreshed appointments data to store\r\nexport function sendAppointment(name, day, hour) {\r\n    return function(dispatch) {\r\n        return (\r\n            $.post('/api/appointments', { name: name, day: day, hour: hour })\r\n            .then((res) => {\r\n                if (res.data.status === 200) {\r\n                    dispatch({ type: GET_DATA, payload: res.data.data });\r\n                } else if (res.data.status === 409){\r\n                    dispatch({ type: FAIL_DUP, payload: res.data.data });\r\n                } else {\r\n                    dispatch({ type: FAIL });\r\n                }\r\n            })\r\n        );    \r\n    };\r\n};","import React from 'react';\r\nimport './Day.css';\r\n\r\nconst Day = (props) => ( //id={props.day} for special UI\r\n    <div className='day' onClick={props.handleHoursHide}>{props.day}</div>\r\n);\r\n\r\nexport default Day;","// This selector is used to process appointments data retrieved from server\r\n// Colors are shown on client schedule UI to represent accesibility of each hour slots\r\nexport function selectColor(state, ownProps) {\r\n    for (let e of state.appointments) {\r\n        if (e.name === state.name && e.day === ownProps.day && e.hour === ownProps.hour) {\r\n            return 'green'; // assigned by user\r\n        } else if (e.name !== state.name && e.day === ownProps.day && e.hour === ownProps.hour) {\r\n            return 'red'; // assigned by another user\r\n        };\r\n    };\r\n    return 'white'; // free to assign\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { selectColor } from '../../../redux/selectors';\r\nimport { sendAppointment } from '../../../redux/actions';\r\nimport './Hour.css';\r\n\r\nclass ConnectHour extends React.Component {\r\n    \r\n    // local state to modal and selector access\r\n    state = {\r\n        modal: false,\r\n        day: this.props.day, // included for ownProps access in selector since these are accessed from parent, not store\r\n        hour: this.props.hour\r\n    };\r\n\r\n    toggleModal = () => {\r\n        this.setState({ modal: !this.state.modal });\r\n    };\r\n\r\n    sendAppointment = () => {\r\n        this.props.sendAppointment(this.props.name, this.props.day, this.props.hour);\r\n        this.toggleModal();\r\n    };\r\n\r\n    // conditioinally render appointment submission profiles depending on availability and user(red=unavailable, white=available, green=user's)\r\n    canSubmit = (color) => {\r\n        switch(color) { \r\n            case 'green':\r\n                return (\r\n                    <ModalBody>You have already signed up for this hour slot</ModalBody>\r\n                )\r\n            case 'red':\r\n                return (\r\n                    <ModalBody>Hour slot unavailable</ModalBody>\r\n                )\r\n            default: \r\n                return (\r\n                    <div>\r\n                        <ModalBody>Is this time correct?</ModalBody>\r\n                        <ModalFooter>\r\n                                <Button color='primary' onClick={this.sendAppointment}>Submit Appointment</Button>\r\n                                <Button color='danger' onClick={this.toggleModal}>Cancel</Button>\r\n                        </ModalFooter>\r\n                    </div>\r\n                )\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={`hour ${this.props.color}`}>\r\n                <div id='hour-modal' onClick={this.toggleModal}>{this.props.hour}</div>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>{this.props.day} at {this.props.hour}</ModalHeader>\r\n                    {this.canSubmit(this.props.color)}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        color: selectColor(state, ownProps),\r\n        name: state.name\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendAppointment: (name, day, hour) => dispatch(sendAppointment(name, day, hour))\r\n    };\r\n};\r\n\r\nconst Hour = connect(mapStateToProps, mapDispatchToProps) (ConnectHour);\r\n\r\nexport default Hour;","import React from 'react';\r\nimport Day from './slot/Day';\r\nimport Hour from './slot/Hour';\r\nimport { DAY_HOURS } from '../../constants/constants';\r\nimport './ScheduleColumn.css';\r\n\r\nclass ScheduleColumn extends React.Component {\r\n\r\n    // local state to keep track of hours column hiding\r\n    state = {\r\n        hours: 'shown'\r\n    };\r\n\r\n    handleHoursHide = () => {\r\n        this.setState(this.state.hours === 'hidden' ? { hours: 'shown' } : {hours: 'hidden'});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='column'> \r\n                <Day day={this.props.d} key={this.props.d+this.props.i} handleHoursHide={this.handleHoursHide}/>\r\n                <div className={`hours ${this.state.hours}`}>\r\n                    {\r\n                        DAY_HOURS.map((h) => (\r\n                            <Hour day={this.props.d} hour={h} key={this.props.d+h} />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default ScheduleColumn;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getData } from '../redux/actions';\r\nimport ScheduleColumn from './schedule-column/ScheduleColumn';\r\nimport { WEEK_DAYS } from '../constants/constants';\r\nimport './Schedule.css';\r\n\r\nclass ConnectSchedule extends React.Component {\r\n\r\n    // direct redux to dispatch action for retrieving server data\r\n    componentDidMount = () => {\r\n        this.props.getData(); \r\n    };\r\n\r\n    render() {\r\n        return ( \r\n            <div>\r\n                <div id='schedule-note'>{this.props.note}</div>\r\n                {   !this.props.appointments\r\n                    ?   <div>retrieving data...</div>\r\n                    :   <div id='schedule'>\r\n                            {\r\n                                WEEK_DAYS.map((d, i) => (\r\n                                    <ScheduleColumn d={d} i={i} key={d}/>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        appointments: state.appointments,\r\n        note: state.note\r\n    };\r\n};\r\n\r\nconst Schedule = connect(mapStateToProps, { getData }) (ConnectSchedule);\r\n\r\nexport default Schedule;","import React from 'react';\nimport { connect } from 'react-redux'\nimport Login from './components/Login';\nimport Schedule from './components/Schedule';\nimport './App.css';\n\nclass ConnectApp extends React.Component {\n  \n  render() {\n    return ( \n      <div id='page'>\n        { this.props.name // access name from store, then conditionally render\n          ? <Schedule />\n          : <Login />\n        }\n      </div>\n    );\n  };\n};\n\n// access redux store\nconst mapStateToProps = (state) => {\n    return { name: state.name };\n};\n\n// connect to redux\nconst App = connect(mapStateToProps) (ConnectApp);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\n);"],"sourceRoot":""}